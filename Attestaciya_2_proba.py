import tkinter as tk
from tkinter import ttk, messagebox
import requests
import json
from datetime import datetime
import threading
import time


class CryptoCurrencyTracker:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç API CoinGecko –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    """

    def __init__(self, root):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

        Args:
            root: –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ Tkinter
        """
        self.root = root
        self.root.title("–¢—Ä–µ–∫–µ—Ä –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç v2.0")
        self.root.geometry("900x650")
        self.root.resizable(True, True)
        self.root.configure(bg='#f0f0f0')

        # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        self.crypto_list = [
            "bitcoin", "ethereum", "ripple", "cardano",
            "dogecoin", "solana", "polkadot", "litecoin",
            "chainlink", "stellar", "bitcoin-cash", "monero"
        ]

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.current_data = []

        # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.is_loading = False

        self.setup_ui()
        self.load_data()

        # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.auto_update_thread = threading.Thread(target=self.auto_update, daemon=True)
        self.auto_update_thread.start()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
        self.setup_styles()

        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="15", style='Main.TFrame')
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame,
                                text="üìä –¢—Ä–µ–∫–µ—Ä –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç",
                                font=("Arial", 18, "bold"),
                                style='Title.TLabel')
        title_label.grid(row=0, column=0, columnspan=5, pady=(0, 20))

        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(main_frame, style='Control.TFrame')
        control_frame.grid(row=1, column=0, columnspan=5, sticky=(tk.W, tk.E), pady=(0, 15))

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.refresh_btn = ttk.Button(control_frame,
                                      text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
                                      command=self.load_data,
                                      style='Accent.TButton')
        self.refresh_btn.pack(side=tk.LEFT, padx=(0, 10))

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        self.loading_label = ttk.Label(control_frame,
                                       text="",
                                       font=("Arial", 10),
                                       style='Status.TLabel')
        self.loading_label.pack(side=tk.LEFT)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_label = ttk.Label(control_frame,
                                     text="–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: 0",
                                     style='Stats.TLabel')
        self.stats_label.pack(side=tk.RIGHT)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.setup_table(main_frame)

        # –°—Ç–∞—Ç—É—Å-–±–∞—Ä
        self.setup_status_bar(main_frame)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ layout
        self.setup_layout(main_frame)

    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        style = ttk.Style()
        style.configure('Main.TFrame', background='#f0f0f0')
        style.configure('Control.TFrame', background='#e0e0e0')
        style.configure('Title.TLabel', background='#f0f0f0', foreground='#2c3e50')
        style.configure('Status.TLabel', background='#e0e0e0', foreground='#7f8c8d')
        style.configure('Stats.TLabel', background='#e0e0e0', foreground='#34495e')
        style.configure('Accent.TButton', font=('Arial', 10, 'bold'))

        # –°—Ç–∏–ª–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        style.configure('Treeview',
                        font=('Arial', 10),
                        rowheight=25)
        style.configure('Treeview.Heading',
                        font=('Arial', 11, 'bold'),
                        background='#34495e',
                        foreground='white')

    def setup_table(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö"""
        # –°–æ–∑–¥–∞–Ω–∏–µ Treeview —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏
        columns = ("rank", "name", "symbol", "price", "change_24h", "market_cap")
        self.tree = ttk.Treeview(parent, columns=columns, show="headings", height=16)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        columns_config = [
            ("rank", "‚Ññ", 50),
            ("name", "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", 200),
            ("symbol", "–°–∏–º–≤–æ–ª", 100),
            ("price", "–¶–µ–Ω–∞ (USD)", 150),
            ("change_24h", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á (%)", 150),
            ("market_cap", "–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è", 150)
        ]

        for col_id, heading, width in columns_config:
            self.tree.heading(col_id, text=heading)
            self.tree.column(col_id, width=width, anchor=tk.CENTER)

        self.tree.grid(row=2, column=0, columnspan=5, sticky=(tk.W, tk.E, tk.N, tk.S))

        # –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        scrollbar = ttk.Scrollbar(parent, orient=tk.VERTICAL, command=self.tree.yview)
        scrollbar.grid(row=2, column=5, sticky=(tk.N, tk.S))
        self.tree.configure(yscrollcommand=scrollbar.set)

        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
        self.tree.bind("<Double-1>", self.on_item_double_click)

    def setup_status_bar(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞"""
        status_frame = ttk.Frame(parent, style='Control.TFrame')
        status_frame.grid(row=3, column=0, columnspan=5, sticky=(tk.W, tk.E), pady=(15, 0))

        self.status_var = tk.StringVar()
        self.status_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")

        status_label = ttk.Label(status_frame,
                                 textvariable=self.status_var,
                                 style='Status.TLabel')
        status_label.pack(side=tk.LEFT, padx=5)

        # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.last_update_var = tk.StringVar()
        self.last_update_var.set("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: --:--:--")

        update_label = ttk.Label(status_frame,
                                 textvariable=self.last_update_var,
                                 style='Status.TLabel')
        update_label.pack(side=tk.RIGHT, padx=5)

    def setup_layout(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –¥–ª—è —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        parent.columnconfigure(0, weight=1)
        parent.rowconfigure(2, weight=1)

    def fetch_crypto_data(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å API CoinGecko

        Returns:
            list|None: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            self.status_var.set("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API...")

            url = "https://api.coingecko.com/api/v3/coins/markets"
            params = {
                'vs_currency': 'usd',
                'ids': ','.join(self.crypto_list),
                'order': 'market_cap_desc',
                'per_page': len(self.crypto_list),
                'page': 1,
                'sparkline': False,
                'price_change_percentage': '24h'
            }

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP-–∑–∞–ø—Ä–æ—Å–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            response = requests.get(url, params=params, timeout=15)
            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP –æ—à–∏–±–æ–∫

            # –ü–∞—Ä—Å–∏–Ω–≥ JSON –¥–∞–Ω–Ω—ã—Ö
            data = response.json()
            self.status_var.set("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã")

            return data

        except requests.exceptions.Timeout:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API")
            return None
        except requests.exceptions.ConnectionError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
            return None
        except requests.exceptions.HTTPError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ API", f"HTTP –æ—à–∏–±–∫–∞: {e}")
            return None
        except json.JSONDecodeError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return None
        except Exception as e:
            messagebox.showerror("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            return None

    def load_data(self):
        """–ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        if self.is_loading:
            return

        self.is_loading = True
        self.refresh_btn.config(state="disabled")
        self.loading_label.config(text="–ó–∞–≥—Ä—É–∑–∫–∞...")

        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self._load_data_thread)
        thread.daemon = True
        thread.start()

    def _load_data_thread(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        data = self.fetch_crypto_data()
        self.root.after(0, self._update_display, data)

    def _update_display(self, data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        for item in self.tree.get_children():
            self.tree.delete(item)

        if data and isinstance(data, list):
            self.current_data = data

            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
            sorted_data = sorted(data, key=lambda x: x.get('market_cap', 0), reverse=True)

            for index, crypto in enumerate(sorted_data, 1):
                self.add_crypto_to_table(index, crypto)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.stats_label.config(text=f"–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {len(sorted_data)}")
            self.last_update_var.set(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}")

            self.status_var.set("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        else:
            self.status_var.set("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.is_loading = False
        self.refresh_btn.config(state="normal")
        self.loading_label.config(text="")

    def add_crypto_to_table(self, rank, crypto):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        try:
            name = crypto.get('name', 'N/A')
            symbol = crypto.get('symbol', '').upper()
            price = crypto.get('current_price', 0)
            change_24h = crypto.get('price_change_percentage_24h', 0)
            market_cap = crypto.get('market_cap', 0)

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
            price_str = self.format_price(price)
            change_str = f"{change_24h:+.2f}%"
            market_cap_str = self.format_market_cap(market_cap)

            # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            item_id = self.tree.insert("", tk.END, values=(
                rank, name, symbol, price_str, change_str, market_cap_str
            ))

            # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è
            if change_24h > 0:
                self.tree.set(item_id, "change_24h", f"‚ñ≤ {change_str}")
                self.tree.item(item_id, tags=('positive',))
            elif change_24h < 0:
                self.tree.set(item_id, "change_24h", f"‚ñº {change_str}")
                self.tree.item(item_id, tags=('negative',))

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Ü–≤–µ—Ç–æ–≤
            self.tree.tag_configure('positive', foreground='#27ae60')  # –ó–µ–ª–µ–Ω—ã–π
            self.tree.tag_configure('negative', foreground='#e74c3c')  # –ö—Ä–∞—Å–Ω—ã–π

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

    def format_price(self, price):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if price >= 1000:
            return f"${price:,.2f}"
        elif price >= 1:
            return f"${price:.2f}"
        elif price >= 0.01:
            return f"${price:.4f}"
        else:
            return f"${price:.6f}"

    def format_market_cap(self, market_cap):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏"""
        if market_cap >= 1e12:  # –¢—Ä–∏–ª–ª–∏–æ–Ω—ã
            return f"${market_cap / 1e12:.2f}T"
        elif market_cap >= 1e9:  # –ú–∏–ª–ª–∏–∞—Ä–¥—ã
            return f"${market_cap / 1e9:.2f}B"
        elif market_cap >= 1e6:  # –ú–∏–ª–ª–∏–æ–Ω—ã
            return f"${market_cap / 1e6:.2f}M"
        else:
            return f"${market_cap:,.0f}"

    def on_item_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Ç–∞–±–ª–∏—Ü—ã"""
        item = self.tree.selection()[0] if self.tree.selection() else None
        if item:
            values = self.tree.item(item, 'values')
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {values[1]} ({values[2]})")

    def auto_update(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥"""
        while True:
            time.sleep(60)
            if self.root.winfo_exists() and not self.is_loading:
                self.root.after(0, self.load_data)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            self.root.mainloop()
        except KeyboardInterrupt:
            self.root.quit()
        except Exception as e:
            messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π: {e}")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    """
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        root = tk.Tk()

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = CryptoCurrencyTracker(root)

        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        root.update_idletasks()
        x = (root.winfo_screenwidth() // 2) - (root.winfo_width() // 2)
        y = (root.winfo_screenheight() // 2) - (root.winfo_height() // 2)
        root.geometry(f"+{x}+{y}")

        app.run()

    except ImportError as e:
        print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install requests")
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {e}")


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
if __name__ == "__main__":
    main()