from tkinter import *  # Импортируем все функции из библиотеки tkinter для создания графического интерфейса
from tkinter import simpledialog as sd  # Импортируем модуль для создания диалоговых окон ввода под переменной sd
from tkinter import messagebox as mb  # Импортируем модуль для работы с всплывающими окнами сообщений под переменной mb
import datetime  # Импортируем модуль для работы с датой и временем
import pygame  # Импортируем модуль для работы со звуком и музыкой
import time  # Импортируем модуль для работы со временем

t = None  # Создаем переменную t для хранения времени напоминания в формате timestamp, изначально None (пустое значение)
music = False  # Переменная для отслеживания проигрывания музыки (False - музыка не играет, True - музыка играет)


def set():  # Объявляем функцию с именем set для установки времени напоминания
    global t  # Указываем, что будем использовать глобальную переменную t внутри функции
    rem = sd.askstring("Время напоминания", "Введите время в формате ЧЧ:ММ (24-часовой формат)")  # Показываем диалоговое окно для ввода времени, результат сохраняем в переменную rem
    if rem:  # Проверяем, что пользователь ввел значение (не нажал "Отмена" и не оставил поле пустым)
        try:  # Начинаем блок обработки исключений для перехвата возможных ошибок при преобразовании строки в числа
            hour = int(rem.split(":")[0])  # Разделяем строку rem по символу ":" и берем первый элемент [0] - часы, преобразуем в целое число
            minute = int(rem.split(":")[1])  # Разделяем строку rem по символу ":" и берем второй элемент [1] - минуты, преобразуем в целое число

            if hour < 0 or hour > 23 or minute < 0 or minute > 59:  # Проверяем, что часы в диапазоне 0-23, минуты в диапазоне 0-59
                mb.showerror("Ошибка", "Неверное время! Часы должны быть от 0 до 23, минуты от 0 до 59")  # Показываем окно ошибки если время некорректно
                return  # Прерываем выполнение функции если время некорректно

            now = datetime.datetime.now()  # Получаем текущую дату и время, сохраняем в переменную now
            dt = now.replace(hour=hour, minute=minute, second=0, microsecond=0)  # Создаем новую дату-время на основе текущей, но с установленными часами и минутами из ввода пользователя, секунды и микросекунды обнуляем
            t = dt.timestamp()  # Преобразуем объект datetime в timestamp (количество секунд с 1 января 1970 года) и сохраняем в переменную t
            label.config(text=f"Напоминание установлено на: {hour:02}:{minute:02}")  # Обновляем текст метки label, показываем установленное время с форматированием (02 означает вывод с ведущим нулем если число меньше 10)
        except ValueError:  # Перехватываем ошибку ValueError, которая возникает если невозможно преобразовать строку в число или если в строке нет символа ":"
            mb.showerror("Ошибка", "Неверный формат времени")  # Показываем окно ошибки если формат времени неверный


def check():  # Объявляем функцию с именем check для периодической проверки времени напоминания
    global t  # Указываем, что будем использовать глобальную переменную t внутри функции
    if t:  # Проверяем, что время напоминания установлено (t не равно None)
        now = time.time()  # Получаем текущее время в формате timestamp
        if now >= t:  # Сравниваем текущее время с временем напоминания, если текущее время больше или равно времени напоминания
            play_snd()  # Вызываем функцию play_snd для воспроизведения звука напоминания
            t = None  # Сбрасываем время напоминания чтобы звук не воспроизводился повторно
    window.after(10000, check)  # Устанавливаем вызов этой же функции check через 10000 миллисекунд (10 секунд) для периодической проверки


def play_snd():  # Объявляем функцию с именем play_snd для воспроизведения звука напоминания
    global music  # Указываем, что будем использовать глобальную переменную music внутри функции
    music = True  # Устанавливаем флаг music в True (музыка играет)
    pygame.mixer.init()  # Инициализируем модуль микшера pygame для работы со звуком
    pygame.mixer.music.load("reminder.mp3")  # Загружаем музыкальный файл "reminder.mp3" в микшер pygame
    pygame.mixer.music.play()  # Воспроизводим загруженную музыку


def stop_music():  # Объявляем функцию с именем stop_music для остановки воспроизведения музыки
    global music  # Указываем, что будем использовать глобальную переменную music внутри функции
    if music:  # Проверяем, что музыка в данный момент играет (music равно True)
        pygame.mixer.music.stop()  # Останавливаем воспроизведение музыки
        music = False  # Устанавливаем флаг music в False (музыка не играет)
    label.config(text="Установить новое напоминание")  # Обновляем текст метки label на стандартный


window = Tk()  # Создаём главное окно программы
window.title("Напоминание")  # Устанавливаем заголовок окна - текст "Напоминание" будет показан в верхней строке окна

label = Label(text="Установите напоминание", font=("Arial", 14))  # Создаём текстовую метку с начальным текстом и шрифтом Arial размером 14
label.pack(pady=10)  # Размещаем метку в окне с вертикальным отступом 10 пикселей сверху и снизу

set_button = Button(text="Установить напоминание", command=set)  # Создаём кнопку с текстом "Установить напоминание", при нажатии будет вызываться функция set
set_button.pack(pady=10)  # Размещаем кнопку в окне с вертикальным отступом 10 пикселей сверху и снизу

stop_button = Button(text="Остановить музыку", command=stop_music)  # Создаём кнопку с текстом "Остановить музыку", при нажатии будет вызываться функция stop_music
stop_button.pack(pady=5)  # Размещаем кнопку в окне с вертикальным отступом 5 пикселей сверху и снизу

check()  # Вызываем функцию check для начала периодической проверки времени напоминания

window.mainloop()  # Запускаем главный цикл программы - окно откроется и будет ждать действий пользователя (нажатий кнопок и т.п.). Окно остаётся открытым - программа реагирует на все действия пользователя в реальном времени.