import tkinter as tk
from tkinter import ttk, messagebox
import requests
import json
from datetime import datetime
import threading
import time


class CryptoCurrencyViewer:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç API Binance –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    """

    def __init__(self, root):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self.root = root
        self.root.title("–ú–æ–Ω–∏—Ç–æ—Ä –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç - Binance")
        self.root.geometry("900x650")
        self.root.resizable(True, True)
        self.root.configure(bg='#f0f0f0')

        # –°–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–∞—Ä–∞ –∫ USDT)
        self.crypto_pairs = [
            "BTCUSDT", "ETHUSDT", "XRPUSDT", "ADAUSDT",
            "DOGEUSDT", "SOLUSDT", "DOTUSDT", "LTCUSDT",
            "LINKUSDT", "XLMUSDT", "BCHUSDT", "XMRUSDT"
        ]

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–Ω—è—Ç–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        self.crypto_names = {
            "BTCUSDT": "Bitcoin",
            "ETHUSDT": "Ethereum",
            "XRPUSDT": "Ripple",
            "ADAUSDT": "Cardano",
            "DOGEUSDT": "Dogecoin",
            "SOLUSDT": "Solana",
            "DOTUSDT": "Polkadot",
            "LTCUSDT": "Litecoin",
            "LINKUSDT": "Chainlink",
            "XLMUSDT": "Stellar",
            "BCHUSDT": "Bitcoin Cash",
            "XMRUSDT": "Monero"
        }

        self.current_data = []
        self.is_loading = False

        self.setup_ui()
        self.load_data()

        # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.auto_update_thread = threading.Thread(target=self.auto_update, daemon=True)
        self.auto_update_thread.start()

    def fetch_binance_data(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å API Binance
        """
        try:
            self.status_var.set("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å Binance...")

            all_data = []

            for pair in self.crypto_pairs:
                # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                price_url = f"https://api.binance.com/api/v3/ticker/price?symbol={pair}"

                # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ 24 —á–∞—Å–∞
                stats_url = f"https://api.binance.com/api/v3/ticker/24hr?symbol={pair}"

                price_response = requests.get(price_url, timeout=10)
                stats_response = requests.get(stats_url, timeout=10)

                price_response.raise_for_status()
                stats_response.raise_for_status()

                price_data = price_response.json()
                stats_data = stats_response.json()

                crypto_data = {
                    'symbol': pair,
                    'name': self.crypto_names.get(pair, pair),
                    'price': float(price_data['price']),
                    'price_change_percent': float(stats_data['priceChangePercent']),
                    'volume': float(stats_data['volume']),
                    'high_price': float(stats_data['highPrice']),
                    'low_price': float(stats_data['lowPrice'])
                }

                all_data.append(crypto_data)

            self.status_var.set("–î–∞–Ω–Ω—ã–µ —Å Binance —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return all_data

        except requests.exceptions.RequestException as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance: {e}")
            return None
        except json.JSONDecodeError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return None

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
        self.setup_styles()

        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="15", style='Main.TFrame')
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        title_label = ttk.Label(main_frame,
                                text="üìä –ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (–¥–∞–Ω–Ω—ã–µ: Binance)",
                                font=("Arial", 16, "bold"),
                                style='Title.TLabel')
        title_label.grid(row=0, column=0, columnspan=6, pady=(0, 20))

        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(main_frame, style='Control.TFrame')
        control_frame.grid(row=1, column=0, columnspan=6, sticky=(tk.W, tk.E), pady=(0, 15))

        self.refresh_btn = ttk.Button(control_frame,
                                      text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                                      command=self.load_data,
                                      style='Accent.TButton')
        self.refresh_btn.pack(side=tk.LEFT, padx=(0, 10))

        self.loading_label = ttk.Label(control_frame, text="", style='Status.TLabel')
        self.loading_label.pack(side=tk.LEFT)

        self.stats_label = ttk.Label(control_frame, text="–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: 0", style='Stats.TLabel')
        self.stats_label.pack(side=tk.RIGHT)

        # –¢–∞–±–ª–∏—Ü–∞
        self.setup_table(main_frame)

        # –°—Ç–∞—Ç—É—Å-–±–∞—Ä
        self.setup_status_bar(main_frame)
        self.setup_layout(main_frame)

    def setup_table(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏"""
        columns = ("rank", "name", "symbol", "price", "change_24h", "high", "low", "volume")
        self.tree = ttk.Treeview(parent, columns=columns, show="headings", height=15)

        columns_config = [
            ("rank", "‚Ññ", 40),
            ("name", "–ù–∞–∑–≤–∞–Ω–∏–µ", 120),
            ("symbol", "–ü–∞—Ä–∞", 80),
            ("price", "–¶–µ–Ω–∞ (USDT)", 100),
            ("change_24h", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á", 100),
            ("high", "–ú–∞–∫—Å —Ü–µ–Ω–∞", 100),
            ("low", "–ú–∏–Ω —Ü–µ–Ω–∞", 100),
            ("volume", "–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤", 120)
        ]

        for col_id, heading, width in columns_config:
            self.tree.heading(col_id, text=heading)
            self.tree.column(col_id, width=width, anchor=tk.CENTER)

        self.tree.grid(row=2, column=0, columnspan=6, sticky=(tk.W, tk.E, tk.N, tk.S))

        scrollbar = ttk.Scrollbar(parent, orient=tk.VERTICAL, command=self.tree.yview)
        scrollbar.grid(row=2, column=6, sticky=(tk.N, tk.S))
        self.tree.configure(yscrollcommand=scrollbar.set)

    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π"""
        style = ttk.Style()
        style.configure('Main.TFrame', background='#f0f0f0')
        style.configure('Control.TFrame', background='#e0e0e0')
        style.configure('Title.TLabel', background='#f0f0f0', foreground='#2c3e50')
        style.configure('Status.TLabel', background='#e0e0e0')
        style.configure('Stats.TLabel', background='#e0e0e0')
        style.configure('Accent.TButton', font=('Arial', 10, 'bold'))
        style.configure('Treeview', font=('Arial', 9))
        style.configure('Treeview.Heading', font=('Arial', 10, 'bold'))

    def setup_status_bar(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞"""
        status_frame = ttk.Frame(parent, style='Control.TFrame')
        status_frame.grid(row=3, column=0, columnspan=6, sticky=(tk.W, tk.E), pady=(15, 0))

        self.status_var = tk.StringVar()
        self.status_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å Binance API...")

        status_label = ttk.Label(status_frame, textvariable=self.status_var, style='Status.TLabel')
        status_label.pack(side=tk.LEFT, padx=5)

        self.last_update_var = tk.StringVar()
        self.last_update_var.set("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: --:--:--")

        update_label = ttk.Label(status_frame, textvariable=self.last_update_var, style='Status.TLabel')
        update_label.pack(side=tk.RIGHT, padx=5)

    def setup_layout(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ layout"""
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        parent.columnconfigure(0, weight=1)
        parent.rowconfigure(2, weight=1)

    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if self.is_loading:
            return

        self.is_loading = True
        self.refresh_btn.config(state="disabled")
        self.loading_label.config(text="–ó–∞–≥—Ä—É–∑–∫–∞ —Å Binance...")

        thread = threading.Thread(target=self._load_data_thread)
        thread.daemon = True
        thread.start()

    def _load_data_thread(self):
        """–ü–æ—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        data = self.fetch_binance_data()
        self.root.after(0, self._update_display, data)

    def _update_display(self, data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        for item in self.tree.get_children():
            self.tree.delete(item)

        if data:
            self.current_data = data

            for index, crypto in enumerate(data, 1):
                self.add_crypto_to_table(index, crypto)

            self.stats_label.config(text=f"–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {len(data)}")
            self.last_update_var.set(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}")
            self.status_var.set("–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
        else:
            self.status_var.set("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")

        self.is_loading = False
        self.refresh_btn.config(state="normal")
        self.loading_label.config(text="")

    def add_crypto_to_table(self, rank, crypto):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü—É"""
        try:
            symbol_clean = crypto['symbol'].replace('USDT', '')

            values = (
                rank,
                crypto['name'],
                symbol_clean,
                f"${crypto['price']:,.2f}",
                f"{crypto['price_change_percent']:+.2f}%",
                f"${crypto['high_price']:,.2f}",
                f"${crypto['low_price']:,.2f}",
                f"{crypto['volume']:,.0f}"
            )

            item_id = self.tree.insert("", tk.END, values=values)

            # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è
            if crypto['price_change_percent'] > 0:
                self.tree.item(item_id, tags=('positive',))
            else:
                self.tree.item(item_id, tags=('negative',))

            self.tree.tag_configure('positive', foreground='#27ae60')
            self.tree.tag_configure('negative', foreground='#e74c3c')

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")

    def auto_update(self):
        """–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥"""
        while True:
            time.sleep(30)
            if self.root.winfo_exists() and not self.is_loading:
                self.root.after(0, self.load_data)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            self.root.mainloop()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç Binance
    """
    try:
        root = tk.Tk()
        app = CryptoCurrencyViewer(root)

        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        root.update_idletasks()
        x = (root.winfo_screenwidth() // 2) - (root.winfo_width() // 2)
        y = (root.winfo_screenheight() // 2) - (root.winfo_height() // 2)
        root.geometry(f"+{x}+{y}")

        app.run()

    except ImportError as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install requests")
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞", f"–û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()